require 'webrick'
require 'stringio'

include WEBrick

class PullServlet < HTTPServlet::AbstractServlet

  def do_GET(request, response)
    response.body = feature_content
    response['Content-Type'] = 'text/xml'
  end

  private

  def feature_content
    content = StringIO.new 
    content.puts '<?xml version="1.0"?>'
    content.puts '<features>'

    features_pattern = File.join @options[0], '**', '*'
    Dir.glob(features_pattern).each do |file|
      add_feature_to(content, file) if File.file?(file)
    end

    content.puts '</features>'

    content.string
  end

  def add_feature_to content, file
    relative_path = file[(@options[0].length)..-1]
    content.puts "  <feature name=\"#{relative_path}\">"
    content << IO.read(file)
    content.puts "  </feature>"
  end

end

class PushServlet < HTTPServlet::AbstractServlet

  def do_POST(request, response)
    File.open(@options[0], 'w'){ |f| f.write(request.query['results']) }
    response['Content-Type'] = 'text/html'
  end

end

server = WEBrick::HTTPServer.new :Port => 1981

server.mount "/features/content", PullServlet, ARGV[0]
server.mount "/features/results", PushServlet, ARGV[1]

%w(INT TERM).each do |signal|
  trap signal do
    server.shutdown
    exit!
  end
end

server.start