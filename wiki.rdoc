== Introduction

As you can see from the README, Bumps extends {Cucumber}[http://cukes.info] and allows you to *pull* feature content and *push* run results to and from a remote server.

Bumps has been designed to work with a {Google Wave robot}[http://code.google.com/apis/wave/extensions/robots/] to allow feature text to be stored and edited inside of a wave. It should remain usable with any server that confirms to the {push/pull contract}[[http://wiki.github.com/brentsnook/pushpullcontract] but will evolve in line with Wave technology.

== Configuration

Bumps is configured and activated using the configure call (to be placed inside of your *env.rb* or somewhere else suitable):

  Bumps.configure { ... }

== Running Cucumber with Bumps

Ain't nothing to it, just run Cucumber as normal making sure to specify a feature directory:

  cucumber my_feature_directory

You must also remember the following things:

* you may only give cucumber a single argument to specify feature
* the feature argument you give cucumber must be creatable/writable as a directory
* don't feed your mogwai after midnight

=== Server

  use_server 'http://mycompliantserver.com'

Specifies the root URL of your push/pull server. Bumps will add *features/content* for the pull URL and *features/results* for the push URL. You should really specify this one (or the push and pull URLs separately) if you don't want things to go haywire.

=== Push URL

  push_to 'http://mycompliantserver.com/features/results'

Specifies a custom push URL. If you specify this you should also specify the pull URL.

=== Push URL

  pull_from 'http://mycompliantserver.com/features/content'

Specifies a custom pull URL.

=== Results Formatter

  format_results_with Cucumber::Formatter::Html

Specifies the class of the TODO: link to cukes formatter page Cucumber formatter that will be used to format the pushed results.

At the moment, this defaults to Cucumber::Formatter::Html. This formatter will produce output that contains a fair bit of information about the Cucumber run but is not entirely fun to parse. 

You can easily write your own formatter and plug that in instead. Capture as little or as much information as your push server requires.

A better default formatter will be added later when I've had more of a chance to play around with Google Wave.

== How does it work?

Ease of use is paramount in Bumps. In order to achieve this, things can and do get a little hairy under the hood.

To perform a feature pull, Bumps effectively needs to jump right in front of Cucumber at the point it attempts to read feature files. This way bumps has access to the same configuration options that will be used by Cucumber (like the feature directory). Bumps also has the opportunity to write the feature files to disk before Cucumber even knows what is going on.

To perform a push, Bumps also needs to register a new custom formatter programatically.

These things require a spot of dark juju - opening up Cucumber and redefining the method that reads features to wedge Bumps tasks in front of it. This is brittle and stomps all over encapsulation and I'm totally open to any better suggestions. 

Trying to have the required hooks added to Cucumber may be a future possibility.

=== Limitations

* doesn't support authentication in any way
* hasn't been tried with large volumes of feature files; if the current approach (bring everything over every time) becomes a problem then it will be addressed
* there must be others, I just can't think of them right now


== Push pull contract

Bumps talks to a single server that responds to both a push and pull URL.

=== Feature Content Pull

Features will be pulled from a particular URL using a GET request
  
  http://myserver.com/features/content

A server should respond like so:

  <?xml version="1.0"?>
  <features>
    <feature name="myfeature.feature">
	  Feature: Do Stuff...
	</feature>
  </features>

The *feature name* should be usable as a relative path to the feature. Bumps will attempt to create any directories that are not present.

* the body of the *feature* element will be written as the feature file contents
* the root *features* element can contain zero or more *feature* elements
* *feature name* must be directly usable as a filesystem path
* *feature name* can also contain Unix slashes in which case Bumps will attempt to create an appropriate directory structure under the feature directory

=== Run Results Push

Features results will be pushed using a POST request
  
  http://myserver.com/features/results

The content of the results is sent in a parameter named *results*. Bumps does not care what is returned in the response, as long as the HTTP response code indicates that everything is hunky dory.

You should TODO link to config section configure an appropriate results formatter to make sure your server will be able to interpret the content properly.